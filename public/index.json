[{"authors":["admin"],"categories":null,"content":"I am a clinical research coordinator in the Infectious Disease Division at the Hospital for Sick Children, and am concurrently completing an MSc in Global Health Policy at LSHTM. Whilst completing my Masters in computational chemistry, I realised that I enjoyed research and computational modelling, but not enough to continue with chemistry. Since then, I have applied and developed my skills in Public Health research. My research interests are in infectious disease epidemiology, with a particular focus on the use of mathematical models to improve outbreak response and resource utilisation.\n","date":1554595200,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":1555459200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a clinical research coordinator in the Infectious Disease Division at the Hospital for Sick Children, and am concurrently completing an MSc in Global Health Policy at LSHTM. Whilst completing my Masters in computational chemistry, I realised that I enjoyed research and computational modelling, but not enough to continue with chemistry. Since then, I have applied and developed my skills in Public Health research. My research interests are in infectious disease epidemiology, with a particular focus on the use of mathematical models to improve outbreak response and resource utilisation.","tags":null,"title":"Callum Arnold","type":"authors"},{"authors":null,"categories":null,"content":"This tutorials’s focus is on how to produce reproducible research, and should serve as an introduction to data management and project organisation. Whilst there are many tools that we can use to ensure our projects and code are tidy and result in reproducible work, some of these are not possible to implement given the potential requirements for administrative priviges during set up. As such, I have divided this tutorial into multiple sections, progressively getting more involved as the tutorial continues. Whilst you may be able to utilise these more sophisticated tools, the core of reproducible research remains the same, so the first chapters still apply.\nI hope that you enjoy the content and feel like you come away having learnt something useful, and that this tutorial can serve as a reference document for your future research. If you have any questions that cannot be answered within the tutorial, or you would like to contribute and improve this document, please contact me.\nThis document would not be possible without the contributions of Stephanie Hughes from Public Health Ontario, so thank you Steph!\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"6590e45947b2c809b6b740bb5deb0556","permalink":"/tutorials/repro-research/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/tutorials/repro-research/","section":"tutorials","summary":"Learn how to get started with reproducible research.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":" This chapter focusses on what everyone can and should be doing. The guidelines here do not require anything to be downloaded, so can be implemented immediately and easily. If you follow the principles laid out here, you are well on your way to making reproducible research.\nBefore we can discuss how we should structure our projects and manage our data, we need to first talk about reproducible research.\nWhat is reproducible work?  Contains relevant code, including which packages were used, and which programming language was used Contains enough text, either via markdown or comments, to be able to understand the purpose of the code chunks and code document  Ideally integrates code and results, along with text, into a single document (literate programming!)  Applying good data quality control techniques to ensure that projects are self-contained so that all files and everything necessary to produce the output documents are easily accessible and accounted for  Why is it important? Simply put, mistakes happen. Projects also move between PHO employees. If your project is structured properly, you will have a code document that contains all of the relevant information, and it is easy to recreate the outcomes. Importantly, you will also have the necessary input files (and tracking of all their changes) stored within the project folder. That way, if you move computers, delete a document by accident, or hand over the project to another person, everything is neatly contained and can be reproduced without hassle.\nHow do I make reproducible work? There are many different ways to make reproducible work. The information listed here should give you the foundations upon which you can build your own systems. However, the principles are the same and largely revolve around project structures and a version control system, such as Git.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"048235ba1330db30eda566741a840d37","permalink":"/tutorials/repro-research/repro-intro/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/repro-intro/","section":"tutorials","summary":"This chapter focusses on what everyone can and should be doing. The guidelines here do not require anything to be downloaded, so can be implemented immediately and easily. If you follow the principles laid out here, you are well on your way to making reproducible research.\nBefore we can discuss how we should structure our projects and manage our data, we need to first talk about reproducible research.\nWhat is reproducible work?","tags":null,"title":"Reproducible Work - An Introduction","type":"docs"},{"authors":null,"categories":null,"content":" The first step in creating reproducible research is creating self-contained projects. Everything that goes in to, and comes out of, the project, should be contained within a single folder (directory). At PHO, it is best that you create these directories within your personal drive (H:\\). I would recommend that you create a folder called repos/ that your project folders live in, e.g. H:/repos/proj/. This way, if you like to store other files on your H:\\ drive, your project folders are neatly separated. Whilst we will discuss version control with Git later, I would suggest that you also routinely back up your project folder to either the shared team drives (I:\\ or SharePoint, depending on whether the data is sensitive).\nNow you have set up your repos/ folder in your H:\\ drive, it is time to create the project folder. This is the structure that I find works for me. You may want to find a variation on it that works for you, but the basic premise of keeping repositories self-contained should remain.\nH:/ └── repos/ └── proj/ ├── data/ ├── docs/ ├── figs/ ├── funs/ ├── out/ ├── cleaning.R └── analysis.R  As you can see, the project repository contains separate directories that you can use to store different file types. Importantly, the analysis and cleaning files are stored in the project root, allowing easy use of relative paths over explicit paths e.g. read_csv(here('data', 'data_file.csv')) rather than read_csv('C:/Users/owner/Documents/Repos/my_project/data/data_file.csv'). The reason why relative paths are preferable is that they allow projects to be used by multiple people without the need to re-write code. If you use explicit paths and change computer, or the project is opened by another person, the code will break as they will not have the same directory structure as the computer that the code was created on.\n Note: the example above used an R package called here_here, calling the function here(). Similar solutions may exist for other languages, and you should try and find them for the language of your choice.\n data/ An important idea is that you should treat your data as read-only. You and your team have likely worked hard to collect the data and it\u0026rsquo;s easy to make a changes along the way that you either forget about, or need to reverse. As most projects span a long time between the data collection and analysis stages, if that happens to you it will take a lot of work to figure out exactly which changes you are interested in reversing etc. To save yourself this hassle, and help make your work reproducible, once the data is collected it should not be edited; all the work should happen in your code, allowing it to be easily checked.\nIf you are following good data practices and treating your data as read-only, all your cleaning will happen within your code (create a cleaning file in your project e.g. proj-cleaning.R). However, if you do need to edit the files manually (and I strongly recommend against it as it makes it harder to reproduce as there isn\u0026rsquo;t a good way to track exactly what changes were made), you should create a save a new (separate) copy of the dataset (using file naming conventions) in your project directory (e.g. H:/repos/proj/2019-01-24_data-file.csv). Additionally, you should create a word document where you can list the changes you made with each new file. When we get to the section on Git, you will see how we can set it up to track all the changes within a project folder (including the create/deletion/movement of files!) so we don\u0026rsquo;t have to remember what changes we make. This means we can just have one copy of each document, and track the changes through time.\nOther subdirectories  docs/: this contains the output documents. For example, if you are using R Markdown to create a pdf via LaTeX, you could place them here. funs/: this contains the functions you write and might want to reference. The idea is to create functions so that can give code a meaningful name. It also helps if you need to repeat a code chunk multiple times, especially if you need to edit it at some point, as you can just call the function rather than typing it out each time. out/: this contains files that are produced from the original data e.g. cleaned data files. You can then call them in your analysis scripts. figs/: this contains figures that may be generated from your scripts.  Importantly, if you follow the principle that your data/ files are read-only, all of the files in these directories (with the exception of funs/) should be reproducible and could be deleted at any time without concern of generating them again. In order to revert to previous figures and output versions, you will need to be able to track changes in your code. This is where a version control system like Git comes in, which we will discuss in the next section.\nHow to name files How you name files and directories may not seem like an important point, but it can cause quite a headache if you try and use code to automate processes, and at best, it just slows things down. To quote Aaron Quinlan, a bioinformatician, \u0026ldquo;a space in a filename is a space in one\u0026rsquo;s soul\u0026rdquo;.\nInstead try and use something like this:\n KISS (Keep It Simple Stupid): use simple and consistent file names  It needs to be machine readable It needs to be human readable It needs to order well in a directory  No special characters and no spaces! Use YYYY-MM-DD date format Use - to delimit words and _ to delimit sections  i.e. 2019-01-19_my-data.csv  Left-pad numbers  i.e. 01_my-data.csv vs 1_my-data.csv If you don\u0026rsquo;t, file orders get messed up when you get to double-digits   What is sensitive data? Some of the data you will be working with is sensitive. As such, we need to know the most appropriate places to store it, along with how it can be shared.\nSensitive data refer to:\n Data which contain identifiable information Personal data (e.g. name, health card number, post code, etc.)  These data contain information which can identify individual persons. Therefore, they must be carefully protected and only shared with those who have special permission. They are also not the norm and are typically used only when absolutely necessary.\nNon-sensitive data refer to:\n Data which have been de-identified (e.g. unique identifier) Aggregated data (e.g. post code region)  Because these data are designed not to be traceable to the individual level, less care and protection is required. However, safeguards are still often used for reassurance.\nAs alluded to earlier, if you have sensitive data, you should not store your backups on the I:\\ drive/SharePoint *delete as appropriate*, instead opting to use the I:\\ drive/SharePoint *delete as appropriate*.\nProject structure summary If you\u0026rsquo;ve followed the steps up until here, you will have a project folder in your H:\\ drive and the shared team drives, complete with all data and output files, and images and tables etc. generated. Most importantly, your project folder will contain a final copy of your code so your results could be replicated if necessary. Ideally, this code will contain your final results in one easy-to-distribute package. This can be done in either a Microsoft Excel or Word file with all code typed and results copy and pasted, or by using a Jupyter notebook as we advocate for here.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1a4f2c07e50e705eb1e1376818a7c9ff","permalink":"/tutorials/repro-research/project-structure/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/project-structure/","section":"tutorials","summary":"The first step in creating reproducible research is creating self-contained projects. Everything that goes in to, and comes out of, the project, should be contained within a single folder (directory). At PHO, it is best that you create these directories within your personal drive (H:\\). I would recommend that you create a folder called repos/ that your project folders live in, e.g. H:/repos/proj/. This way, if you like to store other files on your H:\\ drive, your project folders are neatly separated.","tags":null,"title":"Structuring a Project","type":"docs"},{"authors":null,"categories":null,"content":" Use a version control system such as Git to track changes in your code. Data isn\u0026rsquo;t touched one collected:  Do all data munging within your program i.e. no editing the excel spreadsheets!!! You should have an untouched copy of your data on your H:\\ drive and the shared team drives  Your outputs should be reproducible from the code you have:  Make sure this is the case by routinely clearing your programming environment and re-running the code in a clean environment to ensure your results aren\u0026rsquo;t contingent on \u0026lsquo;hidden\u0026rsquo; packages/modules that were loaded erroneously  Never set explicit file paths (e.g. setwd()) if you can avoid it  Try and use a package that allows you to set relative paths e.g. here_here in R. This allows the project to be passed to someone else in its entirety and the code won\u0026rsquo;t break because they don\u0026rsquo;t have the same folder names and set up as you (also if you work on multiple computers/OS)  Format your filenames properly  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"5891aa2e52c821afa3054a9157c90273","permalink":"/tutorials/repro-research/key-points/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/key-points/","section":"tutorials","summary":"Use a version control system such as Git to track changes in your code. Data isn\u0026rsquo;t touched one collected:  Do all data munging within your program i.e. no editing the excel spreadsheets!!! You should have an untouched copy of your data on your H:\\ drive and the shared team drives  Your outputs should be reproducible from the code you have:  Make sure this is the case by routinely clearing your programming environment and re-running the code in a clean environment to ensure your results aren\u0026rsquo;t contingent on \u0026lsquo;hidden\u0026rsquo; packages/modules that were loaded erroneously  Never set explicit file paths (e.","tags":null,"title":"Key Points","type":"docs"},{"authors":null,"categories":null,"content":"Think of it as tracked changes for your code. When working on a project, even if you\u0026rsquo;re the only one coding, it\u0026rsquo;s important to be able to go back to previous versions if you make a mistake and can\u0026rsquo;t remember all the steps you went through since your last stable version.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"d14be1cda1ede40ffe8e4c4ab07ad076","permalink":"/tutorials/repro-research/git-intro/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/git-intro/","section":"tutorials","summary":"Think of it as tracked changes for your code. When working on a project, even if you\u0026rsquo;re the only one coding, it\u0026rsquo;s important to be able to go back to previous versions if you make a mistake and can\u0026rsquo;t remember all the steps you went through since your last stable version.","tags":null,"title":"Git - An Introduction","type":"docs"},{"authors":null,"categories":null,"content":" There are many ways to get Git running on your computer. Depending on your OS and the version you have, Git may come pre-installed on your computer. However, it is a good idea to update it to the latest version, so I\u0026rsquo;d recommend you follow the steps below anyway.\nWindows  Install Git for Windows  This gives you Git Bash, which is a much nicer way of interfacing with Git than the command line. Note: when asked about \u0026ldquo;Adjusting your PATH environment\u0026rdquo;, be sure to select \u0026ldquo;Git from the command line and also from 3rd-party software\u0026rdquo;. The other default options should be fine. For more details about the installation settings, please click here  Open up Git Bash and enter where git. Open up the command line and enter where git. Depending on whether you have administrator privileges, the outputs should look something like this, respectively  which git : /mingw64/bin/git where git : C:\\Users\\owner\\AppData\\Local\\Programs\\git\\bin\\git.exe (User privileges)  where git : C:\\Program Files\\git\\bin\\git.exe (administrator privileges)  If you see cmd instead of bin, then you need to edit the PATH in your environment variables . You can do this by typing environment variables into the Start box and scrolling to the PATH section of User/System variables (depending on whether you have administrator privileges), and changing cmd to bin in the git.exe path.   Mac There are more (workable) ways to install Git on OSX than on Windows, but I think this is the best option as it gives you a great package manager for the future.\n Open the terminal and enter /usr/bin/ruby -e \u0026quot;$(curl -fsSL https:/raw.Githubusercontent.com/Homebrew/install/master/install)\u0026quot; Enter brew install git into the terminal  Final Git set up steps Now that you have Git running, you need to tell it who you are. This allows multiple people to make changes to code, and the correct names will be attached to the changes.\nOpen up the Git Bash and enter\ngit config --global user.name 'Firstname Lastname' git config --global user.email 'my_email@gmail.com'  Typing in git config --global --list is a way to check that your details have been saved correctly.\nNote: it is essential that you enter the same email as your GitHub account information. This way you can connect the two. If you would prefer to use a different user name than your GitHub user name you can. This would help show you which computer you completed the work on, but it is not important to most people.\nInstallation problems If you followed the instructions above, Git should be ready to go. However, sometimes you still end up with errors. This is far more likely with Windows that Mac, but if you find that the next steps don\u0026rsquo;t work for you, see if the other installation options here work for you, or the trouble shooting tips here (and here if you\u0026rsquo;re on Windows), which are useful when trying to connect Git with RStudio\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"dd5279d31053a4a3124fcb3843880a39","permalink":"/tutorials/repro-research/git-setup/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/git-setup/","section":"tutorials","summary":"There are many ways to get Git running on your computer. Depending on your OS and the version you have, Git may come pre-installed on your computer. However, it is a good idea to update it to the latest version, so I\u0026rsquo;d recommend you follow the steps below anyway.\nWindows  Install Git for Windows  This gives you Git Bash, which is a much nicer way of interfacing with Git than the command line.","tags":null,"title":"Setting Up Git","type":"docs"},{"authors":null,"categories":null,"content":"Now you have Git installed, there are a number of ways to use it. The easiest way is to use a client, which allows you to use buttons instead of typing code. They also provide a visual for more complicated ideas, such as branching, greatly simplifying the process. I prefer to use the SourceTree client, but you can use others. GitKraken is a good alternative, and nicely, it also works on Linux, which many clients don’t. I have had some issues connecting SourceTree with GitHub, so have moved towards GitKraken for some projects, and have no qualms with it so far.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"23ff267b29af7efbe90954545093df4e","permalink":"/tutorials/repro-research/git-client/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/git-client/","section":"tutorials","summary":"Now you have Git installed, there are a number of ways to use it. The easiest way is to use a client, which allows you to use buttons instead of typing code. They also provide a visual for more complicated ideas, such as branching, greatly simplifying the process. I prefer to use the SourceTree client, but you can use others. GitKraken is a good alternative, and nicely, it also works on Linux, which many clients don’t.","tags":null,"title":"Git Client","type":"docs"},{"authors":null,"categories":null,"content":" It is not essential, but one of the best things about Git is that online repositories create an easier way to sync your work between computers and colleagues, avoiding much of the mess caused when this work happens simultaneously/(insert file sharing system of choice) isn\u0026rsquo;t syncing properly. In this section, I will explain the correct way to utilize this, and the other way \u0026hellip;\nGitHub - the Good *This section will need to be updated after figuring out the PHO system*\nGitHub is built for this. You should take full advantage of the effort and troubleshooting that has gone into the platform. Don\u0026rsquo;t try and recreate the wheel\nWith GitHub now offering unlimited free private repositories, I would recommend that you set up an account with GitHub. The reason why I suggest GitHub over a different purpose-built platform (such as Bitbucket or GitLab) is the community. Previously, I would have recommended Bitbucket due to the unlimited free private repositories, but this is no longer a restriction with GitHub. With GitHub, if you ever want to make your code open-source, you immediately have access to the largest community of programmers who can help you improve your code, as well as putting it to good use. And isn\u0026rsquo;t that why we do research?\nNow that you\u0026rsquo;ve decided to use GitHub, it\u0026rsquo;s very easy to register. Just click the link above and select the package you\u0026rsquo;d like. If you have an academic email address, consider making this your primary email address on the account, as it gives you a PRO account unlimited collaborators on private repositories, unlike the standard account that limits it to 3 collaborators.\nBe sure to choose a user name that is easy to remember, and easy to find. I would suggest just using your name.\nNow you have a GitHub account set up, this is your remote. If you work on a project with collaborators, this can be shared with them. That way, collaborators can work on their own versions of the code on their local machine (computer), and when it\u0026rsquo;s ready for other people to use/help write, they can push it to the remote where others can access it. Don\u0026rsquo;t worry if you don\u0026rsquo;t know what push is - we\u0026rsquo;ll cover that soon\nPrivate server It is possible to use and get the benefits of Git without a purpose-made online repository such as GitHub, but it\u0026rsquo;s not as simple and it\u0026rsquo;s not as stable. Because services like Dropbox and OneDrive are not built for storing and tracking changes in code and dot files, it can go wrong, especially when more than one author is involved. Of all the file syncing systems, Dropbox seems to be the best option due to the git-remote-dropbox extension, but this is still inferior to GitHub etc. With these home-made systems, corruption of the project repository is a matter of \u0026ldquo;when\u0026rdquo;, not \u0026ldquo;if\u0026rdquo;. If you insist on using this option, go read the git basic commands first, come back, and read on \u0026hellip;\nDropbox - the Bad git-remote-dropbox Install the git-remote-dropbox extension. The instructions were copied from the documentation and *have not been tested*.\n Install the helper with pip install git-remote-dropbox. Generate an OAuth 2 token by going to the app console, creating a Dropbox API app with \u0026ldquo;Full Dropbox\u0026rdquo; access (or \u0026ldquo;App folder\u0026rdquo; access if you prefer, if you\u0026rsquo;re not going to be using Dropbox\u0026rsquo;s sharing features to use git-remote-dropbox in a multi-user setup), and generating an access token for yourself. Save your OAuth token in ~/.config/git/git-remote-dropbox.json or ~/.git-remote-dropbox.json. The file should look something like this:\n{ \u0026quot;default\u0026quot;: \u0026quot;xxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxx\u0026quot; }    git-remote-dropbox supports using multiple Dropbox accounts. You can create OAuth tokens for different accounts and add them all to the config file, using a user-defined username as the key:\n{ \u0026quot;alice\u0026quot;: \u0026quot;xxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxx\u0026quot;, \u0026quot;ben\u0026quot;: \u0026quot;xxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxx\u0026quot;, \u0026quot;charlie\u0026quot;: \u0026quot;xxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxx\u0026quot; }  You can tell git-remote-dropbox to use the token corresponding to username by specifying a URL like dropbox://username@/path/to/repo.\n You can also specify the token inline by using a URL like dropbox://:token@/path/to/repo.\n  Creating a Dropbox repository Now you\u0026rsquo;ve installed the helper extension, you can start using Dropbox for your remote repositories. Unless a project already exists with a Dropbox repository (i.e. you\u0026rsquo;ve been added to the project and were not the one to set it up), I would recommend that you first create the repositories on your local machine using the steps below.\n Create a project folder on your computer (not in your Dropbox folder), and open up the Git Bash within the folder Enter git init to initialize your folder as a Git repository Enter git remote add origin \u0026quot;dropbox:///path/to/repo\u0026quot;  If a repository already exists in a Dropbox folder, and you want to make a local copy, you can do the following:\n Create a project folder on your computer, and open up the Git Bash within the folder Enter git clone \u0026quot;dropbox:///path/to/repo\u0026quot; -b master  You are now set up to use Dropbox as your remote repository and can commit, push, and pull changes using the Git Bash commands:\n git add . This stages the changes to your files, and it is essential to do before you commit git commit -m \u0026quot;your commit message\u0026quot; git push origin master git pull origin master  OneDrive/Google Drive/Network Drive/others - the Ugly *The instructions for this are based off the following articles and have not been tested*.\nhttps://blog.geekforbrains.com/how-to-use-dropbox-and-git-for-private-repos-e1d304d5ff79\nhttp://autchen.github.io/guides/2016/03/10/git-onedrive.html\nhttp://tony.halcyonlane.com/blog/2011/09/22/Using-git-at-work-on-a-Windows-network-drive//\nhttps://medium.com/@techstreams/git-google-drive-simple-git-host-3a84db4fc1fd\nIf you want to use a different file syncing system, then you need to create a bare remote repository. This is structured differently than a normal git repository, which makes it slightly better for use as a remote repository \u0026hellip; but it\u0026rsquo;s still a bad idea and can corrupt the project.\n Create/open an existing project folder on your computer (not in your OneDrive folder), and open up the Git Bash within the folder Enter git init to initialize your folder as a Git repository Assuming you have files already in the directory, you should commit them using\ngit add --all git commit -m \u0026quot;your commit message\u0026quot;  Create the bare repo in OneDrive etc using\n git init --bare . ~/OneDrive///path/to/repo/project.git  Configure your remote using\n git remote add origin ~/OneDrive///path/to/repo/project.git  push/pull your commits using\n git push origin master   You can share the OneDrive repository (folder) so that multiple people can work on the project. However, if you do this, it is essential you coordinate your push/pull commands to avoid corrupting the repository.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"4f7d067c573947eb983e1bffe6b33a99","permalink":"/tutorials/repro-research/remotes/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/remotes/","section":"tutorials","summary":"It is not essential, but one of the best things about Git is that online repositories create an easier way to sync your work between computers and colleagues, avoiding much of the mess caused when this work happens simultaneously/(insert file sharing system of choice) isn\u0026rsquo;t syncing properly. In this section, I will explain the correct way to utilize this, and the other way \u0026hellip;\nGitHub - the Good *This section will need to be updated after figuring out the PHO system*","tags":null,"title":"Remote Repositories","type":"docs"},{"authors":null,"categories":null,"content":" *This section will need to be updated after figuring out the PHO system*\nIf everything has gone well until now, you\u0026rsquo;re ready to create a project repository. This is where all your code, all your data, all your output files, everything, should live. Whilst you can create a repository directly on your computer, I would advise against this as it causes additional headaches when you want to connect it with GitHub. Instead, create the remote repository first on GitHub.\n Go to www.Github.com and click the + and \u0026ldquo;New repository\u0026rdquo;. Choose a project name Decide whether you want it to be a public or private project (choose private if working on PHO data and research, as you can always convert it to public later) Initialize with a README file  Connecting to GitHub *This section will need to be updated after figuring out the PHO system*\nIf you are using SourceTree, there are two ways to connect your computer to your GitHub repositories. I would recommend the first option, as it makes cloning repositories (making a copy on your local computer) easier in the future, as you don\u0026rsquo;t have to go to GitHub each time to find the HTTPS/SSH address.\nMethod 1\n Go to Tools -\u0026gt; Options -\u0026gt; Authentication in SourceTree and add your GitHub account details Leave the preferred protocol at \u0026ldquo;HTTPS\u0026rdquo; for the moment, unless you know what you\u0026rsquo;re doing with SSH keys Now open a new tab, click on Remote, and you should see your repositories listed Clone the repositories that you\u0026rsquo;d like to work on   Note: Now SourceTree and GitHub are connected, you shouldn\u0026rsquo;t have to do the first few steps - just go to step 3.\n Method 2\n Go to your repository on GitHub and click on the green \u0026ldquo;Clone or download\u0026rdquo; button Copy the HTTPS address (your settings should say \u0026ldquo;Clone with HTTPS\u0026rdquo; above it, otherwise click \u0026ldquo;Use HTTPS\u0026rdquo;) Go to SourceTree, open a new tab, and click on \u0026ldquo;Clone\u0026rdquo; Paste the HTTPS address into the \u0026ldquo;Source Path / URL:\u0026rdquo; box Click on the \u0026ldquo;Clone\u0026rdquo; button at the bottom  Method 3 (not recommended)\nIf you would like to do it the hard way and use the Git Bash, read the instructions here\nNote: if you would like to use SSH keys, read the instructions here\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"3ff55e4ead169e92cfba40a5ddc45dee","permalink":"/tutorials/repro-research/create-repo/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/create-repo/","section":"tutorials","summary":"*This section will need to be updated after figuring out the PHO system*\nIf everything has gone well until now, you\u0026rsquo;re ready to create a project repository. This is where all your code, all your data, all your output files, everything, should live. Whilst you can create a repository directly on your computer, I would advise against this as it causes additional headaches when you want to connect it with GitHub.","tags":null,"title":"Creating a Repositories","type":"docs"},{"authors":null,"categories":null,"content":"There are many commands that you could learn in Git, but these are the basics, and will be sufficient for pretty much everything you\u0026rsquo;ll need to do at the moment.\n commit: this standings for committing a change to your file in Git. Think of it as saving a document, but instead of saving the whole document as-is, Git saves just the changes since the last version. This makes it very efficient, especially when it comes to backing up your work. Key points:  commit often. By making and saving small changes, your code versions becomes more readable in case you need to go back and find out exactly what and where it went wrong. Always write helpful messages - keep them succinct, but make sure they describe what the change you made was.  pull: this commands copies the version of the code from your remote to your local machine. Use this when you want to get the most up-to-date version of your code to work on (assuming your local version isn\u0026rsquo;t the most up-to-date) push: the opposite of pull. If your local version is the most up-to-date version, push your version to the remote.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"17311bc91a5efc9f33003a65ae17f280","permalink":"/tutorials/repro-research/basic-commands/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/basic-commands/","section":"tutorials","summary":"There are many commands that you could learn in Git, but these are the basics, and will be sufficient for pretty much everything you\u0026rsquo;ll need to do at the moment.\n commit: this standings for committing a change to your file in Git. Think of it as saving a document, but instead of saving the whole document as-is, Git saves just the changes since the last version. This makes it very efficient, especially when it comes to backing up your work.","tags":null,"title":"Basic Commands","type":"docs"},{"authors":null,"categories":null,"content":" Branching is a key part of the Git work-flow. It allows you to make changes to your code, without worrying about breaking previously \u0026lsquo;good\u0026rsquo; code. But what is it?\nSimply put, when you create another branch you are creating a copy of your code at that point in time. This is useful because it allows you to make changes to your copy, and leave your original code intact! So there\u0026rsquo;s no concern about breaking your working code while you test out some ideas.\n \u0026ldquo;But isn\u0026rsquo;t that why we use Git?\u0026rdquo;\n Kind of. But Git is only so powerful. If you have working code, you don\u0026rsquo;t want to put it out of action whilst you test ideas out, especially if other people need to use your code and can\u0026rsquo;t wait for you to figure out your future problems. So creating another branch allows you to get around this issue. For most projects, you can get away with just two branches, a master and a develop, which are explained below. If your project is complex, and requires multiple people to work on the code at the same time, it would be worth you looking at implementing this model.\nThe image to the right is copied from the model listed above. It is useful in illustrating the master and develop approach to branching.\nCreating a branch As with all things in Git, you can do this multiple ways. I prefer to use the SourceTree client, as I find it far more intuitive when you can see the changes, but you can use the command line or Git bash. If you want to explore the command line code, I would recommend visiting this website, which allows you to interact with the code through illustrations.\nWhen you are in SourceTree, open the repository you would like to create a branch in. You will notice that there are two buttons called Branch and Merge. If you click on Branch, you will see something like this\nEnter the branch name you would like to create into New Branch (I would suggest develop), and hit Create Branch. That\u0026rsquo;s it. You now have a master and develop branch.\nYou might notice the tick-box Checkout New Branch. This means SourceTree will execute the command git checkout develop i.e. you will move to the develop branch to continue your work. Now, any changes you make to your code will happen in the develop copy of the code, not in your master branch. Neat. If you want to move back to master branch at some point, you simply right click on the master branch on the left side of SourceTree, and select Checkout master....\nMerging a branch You\u0026rsquo;ve created a develop branch so you can keep you master pristine and in working condition. But now you\u0026rsquo;ve made changes you\u0026rsquo;re happy with, and you want to incorporate them in the main code. To do this, you need to merge the changes from develop into master.\nTo do this, first you need to checkout the master branch, so you are merging changes into it. Then, click on the Merge button in SourceTree. Select the commit you would like to merge into the master branch (most likely the top one in the develop branch), and click OK. You should have a view like this.\nYou have now merged your first feature. Whilst the merge feature is particularly useful, it is not the only way of doing this. rebase is another option that works in a slightly different way. It is slightly beyond the scope of this document, but you should read this document and visit this website, as suggested previously, to get practice putting them both into practice.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6f7fe0788c2f2df88fcce4b3b8ca3fb5","permalink":"/tutorials/repro-research/branching/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/branching/","section":"tutorials","summary":"Branching is a key part of the Git work-flow. It allows you to make changes to your code, without worrying about breaking previously \u0026lsquo;good\u0026rsquo; code. But what is it?\nSimply put, when you create another branch you are creating a copy of your code at that point in time. This is useful because it allows you to make changes to your copy, and leave your original code intact! So there\u0026rsquo;s no concern about breaking your working code while you test out some ideas.","tags":null,"title":"Branching","type":"docs"},{"authors":null,"categories":null,"content":"This chapter is aimed at those who are able to download the programming language Python. This should hopefully be everyone, as it does not currently require administrative privileges, but we cannot guarantee this will be the case in the future.\nThere are many different types of notebooks, but we will only explore Jupyter notebooks. The reason why we won\u0026rsquo;t look at other options is because Jupyter notebooks are very well established and have numerous kernels available that allow for the use of many different statistical and programming languages. Note: if you are using R, you should be using RStudio in combination with R Notebooks or Rmd files (or using #' in your .R scripts to insert markdown comments), which are far more suited to R than Jupyter is.\nBut first, what is a notebook, and why should we use them?\nA notebook is a way of producing documents that mix plain text and code, which was one of the key goals at the beginning of this guide! Whilst they are not perfect (though read this to see some rebuttals), and should not be used for doing heavy coding and scripting, they are excellent for data exploration and producing output documents. You just need to be careful to run all the code in a fresh environment often enough to ensure you don\u0026rsquo;t have any hidden packages/modules loaded in the background that aren\u0026rsquo;t part of your code.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"506e5ac2697aca75684c8c6e21c01761","permalink":"/tutorials/repro-research/notebooks-intro/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/notebooks-intro/","section":"tutorials","summary":"This chapter is aimed at those who are able to download the programming language Python. This should hopefully be everyone, as it does not currently require administrative privileges, but we cannot guarantee this will be the case in the future.\nThere are many different types of notebooks, but we will only explore Jupyter notebooks. The reason why we won\u0026rsquo;t look at other options is because Jupyter notebooks are very well established and have numerous kernels available that allow for the use of many different statistical and programming languages.","tags":null,"title":"Notebooks - An Introduction","type":"docs"},{"authors":null,"categories":null,"content":" This section will give you a brief overview of what a Jupyter notebook is and how to use them, but if you would like a more detailed understanding, please read the official documentation. Jupyter Labs has now been released as a newer version of notebooks, giving you a full IDE (integrated development environment) and more control over the notebooks and working environment. This guide will not explore these features, as we are more interested in how to use the notebook.\n Note: throughout this section you can substitute the phrase \u0026ldquo;Jupyter notebooks\u0026rdquo; with \u0026ldquo;Jupyter Labs\u0026rdquo; if you would prefer to have a full IDE allowing you more control over the system.\n Jupyter notebooks are run on Python, though additional things can be downloaded to allow you to use your programming language of choice. For an example of what you can do with Jupyter notebooks, click here, and here for a collection of neat and applied notebooks.\nInstalling Jupyter notebooks Mac\u0026rsquo;s come shipped with a version of Python, but it is most likely outdated, and it doesn\u0026rsquo;t contain everything we want. In order to get running, I strongly recommend downloading the Anaconda distribution over other distributions, or even just directly from Python\u0026rsquo;s website. The instructions below will be enough to get you up and running with Jupyter notebooks in your language of choice.\n Download the full Anaconda distribution i.e. not miniconda  Be sure to choose Python 3.x, not Python 2.x, as it\u0026rsquo;s the newer version and is forwards-compatible. Be sure to only install for one user, not the whole system Be sure to select Add Anaconda to my PATH environment variable under Advanced Options Be sure to install Anaconda to the H:\\ drive on your computer, as this is where your data lives. To do this you will need to manually edit the installation path within the Anaconda installer wizard, otherwise it will end up in the C:\\ drive  This is OK if you are able to store data on this drive, and therefore can create your repositories within the C:\\ drive. Worst case scenario you can use the command cd \u0026quot;H:/...\u0026quot; at the top of the notebook to specify the relevant path to your data, but this is bad practice for the reasons mentioned above.   Use kernels to connect your programming language of choice with python and the notebook  To see how to get a particular language to work in Jupyter Notebooks, please click on the appropriate language:  Stata SAS R    Kernels A kernel is program that allows the notebook to connect with, and run, your code. Jupyter comes with the Python code pre-installed, but if you want to use a different language, you will need to download a specific kernel.\nBelow, the installation instructions are described for common languages used in epidemiology. To see a full list of kernels available for Jupyter, along with the appropriate documentation and installation instructions, follow this link.\nInstalling the Stata kernel The instructions for installing the stata_kernel are based from the original documentation here. It should work with Stata 12 (we have tested it). If these instructions do not work for you, it may be that there has been an update to the kernel, at which point, please refer to the original documentation linked above.\nOpen a command prompt (Windows) / terminal (linux/mac) and type/copy-paste the following commands, pressing enter after each line\n pip install stata_kernel python -m stata_kernel.install  Windows-specific steps\nIn order to let stata_kernel talk to Stata, you need to link the Stata Automation library:\n In the installation directory (most likely C:\\Program Files (x86)\\Stata12 or similar), right-click on the Stata executable, for example, StataSE.exe (this will just show as StataSE, but is listed as an application). Choose Create Shortcut. Placing it on the Desktop is fine. Right-click on the newly created Shortcut to StataSE.exe, choose Properties, and append/Register to the end of the Target field. So if the target is currently \u0026quot;C:\\Program Files\\Stata12\\StataSE.exe\u0026quot;, change it to \u0026quot;C:\\Program Files\\Stata12\\StataSE.exe\u0026quot; /Register (note the space before /). Click OK. Right-click on the updated Shortcut to StataSE.exe; choose Run as administrator. Enter your CIHS details  Installing the SAS kernel *This has not yet been tested here at PHO. The instructions for installing the sas_kernel are based from the original documentation here*\nOpen a command prompt (Windows) / terminal (linux/mac) and type/copy-paste the following commands, pressing enter after each line. First we need to install a dependency called saspy that helps the kernel connect SAS to python\n pip install saspy pip install sas_kernel  You should now see something like this.\nAvailable kernels: python3 /home/sas/anaconda3/lib/python3.5/site-packages/ipykernel/resources sas /home/sas/.local/share/jupyter/kernels/sas  Now verify that the SAS Executable is correct\n find the sascfg.py file \u0026ndash; it is currently located in the install location (see above) [install location]/site-packages/saspy/sascfg.py. To query pip for the location of the file, type pip show saspy. Failing that, this command will search the OS for the file location: find / -name sascfg.py edit the file with the correct path the SAS executable and include any options you wish it include in the SAS invocation. See examples in this file  Connecting R with Jupyter If you are hoping to make nice documents and reproducible work using R, I would highly recommend that you use the R Markdown or R Notebook through RStudio application instead. However, if you would prefer Jupyter, then please read on.\nIt is possible to download an R kernel, much like for Stata and SAS, but it can be a bit fickle, so a different approach is described below. It is important to note that with this method you are installing a fresh version of R, so you will not have access to the packages you have previously installed - you will need to reinstall them in this R environment, which could be done within a Jupyter notebook.\nOpen a command prompt (Windows) / terminal (Linux/Mac) and enter the following commands:\n conda install r-essentials r-igraph Rscript -e 'install.packages(\u0026quot;languageserver\u0026quot;)'  If you would rather install an R kernel than a fresh install of R within the Anaconda distribution, you can follow the instructions here. The advantage of this is that it allows the notebook to access previously installed packages as they are not running off a fresh version of R.\nCreating a notebook You can either open up the Anaconda navigator and then Jupyter notebooks, or open Jupyter notebooks directly. Once open, navigate to the directory you would like to create the notebook in (If you are using a version control system like Git, then you should be within the project\u0026rsquo;s repository)\nSelect the New button in the top right corner, and then select the language you would like to program in (this assumes that you have downloaded an appropriate kernel if you would like to use a language other than Python)\nRunning a Jupyter notebook *Update this section*\nNow you have the notebook open in your chosen language, it\u0026rsquo;s time to start doing some data exploration and analysis. Here, we\u0026rsquo;ll cover some basic commands that will get you started, but to fully leverage the power of the notebook, you should read the Jupyter documentation, along with the documentation of your preferred kernel, particularly sections relating to magic commands (which are language-specific).\n Shift + Enter Command + Enter Esc  Ctrl/Cmd + a Ctrl/Cmd + b dd Ctrl/Cmd + m Ctrl/Cmd + y  Enter  Tab   Git and Jupyter Unfortunately, Git and Jupyter don\u0026rsquo;t always play nicely, so we have to do a few things to try and get around the issues. Due to the way the notebooks create and store the outputs from the code, diffs become unreadable. There are a few ways to get around this. The first option is the simplest, but the others provide a little more control over what you see in the diffs.\n**Test out the other options!**\n Clear all outputs before you save and commit the files. That way, Git only tracks changes to the input Download the notebook as a markdown file allowing diffs to be tracked in Git as normal nbdime ReviewNB Nextjournal is a promising take on notebooks that simplifies the process of making reproducible research. Currently it is only in beta, and for private research, but if it has a free version when it becomes established it would be a good option allowing a \u0026lsquo;Google Docs\u0026rsquo; style of version control  Customizing Jupyter notebook\u0026rsquo;s UI The following section is not essential and can be ignored if you want to keep things as simple as possible.\nBecause I do not like the In[] Out[] text showing in documents, along with centering plots/figures, I have customized the Jupyter notebook settings. If you would like to do the same, this section should help you. It is not necessary, but I feel that it gives cleaner documents (including pdf documents via LaTeX). If you do this, it is essential that you routinely restart the kernel to run everything again in a fresh environment as it is incredibly easy to run code blocks out of order and forget how this changes the output and introduces hidden packages.\nIf you would like to customize the look of the notebook, jupyterthemes is a great package that can be installed. I have also edited the custom.css file (C:\\Users\\owner\\.jupyter\\custom\\), adding display: None; under the section\ndiv.prompt, .prompt {  so that it now reads\ndiv.prompt, .prompt { font-family: monospace, monospace; font-size: 9pt !important; font-weight: normal; display: None; . . . }  This removes the In[] Out[] text. To centre the output of tables/figures, add\n.output_png { display: table-cell; text-align: center; vertical-align: middle; }  to the custom.css file, right after the .prompt {..} section.\nTo enable soft wrapping in the notebook, you need to edit the notebook.json file (C:\\Users\\callum arnold\\.jupyter\\nbconfig\\). If it does not exist, you need to create it. Once open, add\n{ \u0026quot;MarkdownCell\u0026quot;: { \u0026quot;cm_config\u0026quot;: { \u0026quot;lineWrapping\u0026quot;: true } }, \u0026quot;CodeCell\u0026quot;: { \u0026quot;cm_config\u0026quot;: { \u0026quot;lineWrapping\u0026quot;: true } } }  before restarting Jupyter.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"517f519ddbdba8df5d87b327e81cce47","permalink":"/tutorials/repro-research/setup-jupyter/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/setup-jupyter/","section":"tutorials","summary":"This section will give you a brief overview of what a Jupyter notebook is and how to use them, but if you would like a more detailed understanding, please read the official documentation. Jupyter Labs has now been released as a newer version of notebooks, giving you a full IDE (integrated development environment) and more control over the notebooks and working environment. This guide will not explore these features, as we are more interested in how to use the notebook.","tags":null,"title":"Setting Up Jupyter Notebooks","type":"docs"},{"authors":null,"categories":null,"content":" Now you have set up Jupyter to run with the programming language of your choice, we should start using it. How you do that is detailed in this section.\nCreating a notebook You can either open up the Anaconda navigator and then Jupyter notebooks, or open Jupyter notebooks directly. Once open, navigate to the directory you would like to create the notebook in (If you are using a version control system like Git, then you should be within the project\u0026rsquo;s repository)\nSelect the New button in the top right corner, and then select the language you would like to program in (this assumes that you have downloaded an appropriate kernel if you would like to use a language other than Python)\nRunning a Jupyter notebook *Update this section*\nNow you have the notebook open in your chosen language, it\u0026rsquo;s time to start doing some data exploration and analysis. Here, we\u0026rsquo;ll cover some basic commands that will get you started, but to fully leverage the power of the notebook, you should read the Jupyter documentation, along with the documentation of your preferred kernel, particularly sections relating to magic commands (which are language-specific).\n Shift + Enter Command + Enter Esc  Ctrl/Cmd + a Ctrl/Cmd + b dd Ctrl/Cmd + m Ctrl/Cmd + y  Enter  Tab   Git and Jupyter Unfortunately, Git and Jupyter don\u0026rsquo;t always play nicely, so we have to do a few things to try and get around the issues. Due to the way the notebooks create and store the outputs from the code, diffs become unreadable. There are a few ways to get around this. The first option is the simplest, but the others provide a little more control over what you see in the diffs.\n**Test out the other options!**\n Clear all outputs before you save and commit the files. That way, Git only tracks changes to the input Download the notebook as a markdown file allowing diffs to be tracked in Git as normal nbdime ReviewNB Nextjournal is a promising take on notebooks that simplifies the process of making reproducible research. Currently it is only in beta, and for private research, but if it has a free version when it becomes established it would be a good option allowing a \u0026lsquo;Google Docs\u0026rsquo; style of version control  Customizing Jupyter notebook\u0026rsquo;s UI The following section is not essential and can be ignored if you want to keep things as simple as possible.\nBecause I do not like the In[] Out[] text showing in documents, along with centering plots/figures, I have customized the Jupyter notebook settings. If you would like to do the same, this section should help you. It is not necessary, but I feel that it gives cleaner documents (including pdf documents via LaTeX). If you do this, it is essential that you routinely restart the kernel to run everything again in a fresh environment as it is incredibly easy to run code blocks out of order and forget how this changes the output and introduces hidden packages.\nIf you would like to customize the look of the notebook, jupyterthemes is a great package that can be installed. I have also edited the custom.css file (C:\\Users\\owner\\.jupyter\\custom\\), adding display: None; under the section\ndiv.prompt, .prompt {  so that it now reads\ndiv.prompt, .prompt { font-family: monospace, monospace; font-size: 9pt !important; font-weight: normal; display: None; . . . }  This removes the In[] Out[] text. To centre the output of tables/figures, add\n.output_png { display: table-cell; text-align: center; vertical-align: middle; }  to the custom.css file, right after the .prompt {..} section.\nTo enable soft wrapping in the notebook, you need to edit the notebook.json file (C:\\Users\\callum arnold\\.jupyter\\nbconfig\\). If it does not exist, you need to create it. Once open, add\n{ \u0026quot;MarkdownCell\u0026quot;: { \u0026quot;cm_config\u0026quot;: { \u0026quot;lineWrapping\u0026quot;: true } }, \u0026quot;CodeCell\u0026quot;: { \u0026quot;cm_config\u0026quot;: { \u0026quot;lineWrapping\u0026quot;: true } } }  before restarting Jupyter.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"271376ef259b93879857027b08b8cce5","permalink":"/tutorials/repro-research/using-jupyter/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/using-jupyter/","section":"tutorials","summary":"Now you have set up Jupyter to run with the programming language of your choice, we should start using it. How you do that is detailed in this section.\nCreating a notebook You can either open up the Anaconda navigator and then Jupyter notebooks, or open Jupyter notebooks directly. Once open, navigate to the directory you would like to create the notebook in (If you are using a version control system like Git, then you should be within the project\u0026rsquo;s repository)","tags":null,"title":"Using Jupyter Notebooks","type":"docs"},{"authors":null,"categories":null,"content":"We\u0026rsquo;ve covered a lot of information up until now about setting up your projects and your code, but a big part of reproducible research is the creation of nice-looking documents. The reason we\u0026rsquo;ve gone to such effort to install Jupyter notebooks and connect them with our language of choice is that not only do they allow for excellent data exploration, but they also make documents that look professional.\nIn scientific articles, whilst it\u0026rsquo;s not essential, LaTeX is a nice touch, and Jupyter can give you a LaTeX formatted pdf documents. To do this, you will first need to install LaTeX. If you are on Windows, I would recommend the MiKTeX distribution, and if you use a Mac, then I would recommend the MacTeX distribution. You will also need the \u0026ldquo;swiss-army knife\u0026rdquo; of file conversion, pandoc. Pandoc is not needed for creating LaTeX-formatted pdfs, but if you have documents with unsupported characters and you need to use a different pdf-engine you\u0026rsquo;ll need to use pandoc.\nDuring the installation process, LaTeX should have been added automatically to the PATH. To test this, enter pdflatex into a command line/terminal. If you get the output This is pdfTeX ... then you are good to go. If not, please add the executable to the PATH as listed above. The executable location can be found by opening the MiKTeX/MacTeX console and looking at the bin directory under settings. For me, on a Windows computer where I don\u0026rsquo;t have administrator privileges it reads C:\\Users\\owner\\AppData\\Local\\Programs\\MiKTeX 2.9\\miktex/bin/x64. If you are still having issues, please consult this document.\nNow you\u0026rsquo;re ready to create a LaTeX-formatted pdf document. All you need to do is click File -\u0026gt; Download as -\u0026gt; PDF via LaTeX (.pdf).\nUnfortunately, when creating pdf documents, code is not hard wrapped. This means that if you have a very long line of code (\u0026gt; 80 characters), it will run out of the formatted area, and at worst, off the page. At present, I do not know a way to force Jupyter notebooks to wrap the output automatically, so instead you have to write clean code and start new lines using , and \\n if it\u0026rsquo;s too long.\nIf you would rather not produce a pdf via LaTeX, instead wanting an arguably more readable output, you could create an html file. This is done in the same manner as pdf documents.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"bced078acaf85beb92d1cc03e0797d17","permalink":"/tutorials/repro-research/jupyter-output/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/tutorials/repro-research/jupyter-output/","section":"tutorials","summary":"We\u0026rsquo;ve covered a lot of information up until now about setting up your projects and your code, but a big part of reproducible research is the creation of nice-looking documents. The reason we\u0026rsquo;ve gone to such effort to install Jupyter notebooks and connect them with our language of choice is that not only do they allow for excellent data exploration, but they also make documents that look professional.\nIn scientific articles, whilst it\u0026rsquo;s not essential, LaTeX is a nice touch, and Jupyter can give you a LaTeX formatted pdf documents.","tags":null,"title":"Output Documents","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you'll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.toml file.\n```python import pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head() ```  renders as\nimport pandas as pd data = pd.read_csv(\u0026quot;data.csv\u0026quot;) data.head()  Math Academic supports a Markdown extension for $\\LaTeX$ math. You can enable this feature by toggling the math option in your config/_default/params.toml file and adding markup: mmark to your page front matter.\nTo render inline or block math, wrap your LaTeX math with $$...$$.\nExample math block:\n$$\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |} {\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}$$  renders as\n\\[\\gamma_{n} = \\frac{ \\left | \\left (\\mathbf x_{n} - \\mathbf x_{n-1} \\right )^T \\left [\\nabla F (\\mathbf x_{n}) - \\nabla F (\\mathbf x_{n-1}) \\right ] \\right |}{\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2}\\]\nExample inline math $$\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2$$ renders as \\(\\left \\|\\nabla F(\\mathbf{x}_{n}) - \\nabla F(\\mathbf{x}_{n-1}) \\right \\|^2\\) .\nExample multi-line math using the \\\\ math linebreak:\n$$f(k;p_0^*) = \\begin{cases} p_0^* \u0026amp; \\text{if }k=1, \\\\ 1-p_0^* \u0026amp; \\text {if }k=0.\\end{cases}$$  renders as\n\\[f(k;p_0^*) = \\begin{cases} p_0^* \u0026 \\text{if }k=1, \\\\ 1-p_0^* \u0026 \\text {if }k=0.\\end{cases}\\]\nDiagrams Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the diagram option in your config/_default/params.toml file or by adding diagram: true to your page front matter.\nAn example flowchart:\n```mermaid graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; ```  renders as\ngraph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D;  An example sequence diagram:\n```mermaid sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! ```  renders as\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good!  An example Gantt diagram:\n```mermaid gantt dateFormat YYYY-MM-DD section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d another task : 24d ```  renders as\ngantt dateFormat YYYY-MM-DD section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d another task : 24d  Todo lists You can even write your todo lists in Academic too:\n- [x] Write math example - [x] Write diagram example - [ ] Do something else  renders as\n Write math example Write diagram example Do something else  Tables Represent your data in tables:\n| First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell |  renders as\n   First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    Asides Academic supports a Markdown extension for asides, also referred to as notices or hints. By prefixing a paragraph with A\u0026gt;, it will render as an aside. You can enable this feature by adding markup: mmark to your page front matter, or alternatively using the Alert shortcode.\nA\u0026gt; A Markdown aside is useful for displaying notices, hints, or definitions to your readers.  renders as\n A Markdown aside is useful for displaying notices, hints, or definitions to your readers.\n Did you find this page helpful? Consider sharing it 🙌 ","date":1562889600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562889600,"objectID":"07e02bccc368a192a0c76c44918396c3","permalink":"/post/writing-technical-content/","publishdate":"2019-07-12T00:00:00Z","relpermalink":"/post/writing-technical-content/","section":"post","summary":"Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.\nHighlight your code snippets, take notes on math classes, and draw diagrams from textual representation.\nOn this page, you'll find some examples of the types of technical content that can be rendered with Academic.\nExamples Code Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the highlight option in your config/_default/params.","tags":null,"title":"Writing technical content in Academic","type":"post"},{"authors":["Callum Arnold"],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":["Callum Arnold"],"categories":[],"content":" from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')  print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and Jupyter Install Anaconda which includes Python 3 and Jupyter notebook.\nOtherwise, for advanced users, install Jupyter notebook with pip3 install jupyter.\nCreate a new blog post as usual Run the following commands in your Terminal, substituting \u0026lt;MY_WEBSITE_FOLDER\u0026gt; and my-post with the file path to your Academic website folder and a name for your blog post (without spaces), respectively:\ncd \u0026lt;MY_WEBSITE_FOLDER\u0026gt; hugo new --kind post post/my-post cd \u0026lt;MY_WEBSITE_FOLDER\u0026gt;/content/post/my-post/  Create or upload a Jupyter notebook Run the following command to start Jupyter within your new blog post folder. Then create a new Jupyter notebook (New \u0026gt; Python Notebook) or upload a notebook.\njupyter notebook  Convert notebook to Markdown jupyter nbconvert Untitled.ipynb --to markdown --NbConvertApp.output_files_dir=. # Copy the contents of Untitled.md and append it to index.md: cat Untitled.md | tee -a index.md # Remove the temporary file: rm Untitled.md  Edit your post metadata Open index.md in your text editor and edit the title etc. in the front matter according to your preference.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":[],"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view \r Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1546300800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1546300800,"objectID":"322dbaccf72a6d71f827fdb2866be935","permalink":"/teaching/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/teaching/","section":"","summary":"Hello!","tags":null,"title":"Landing Page","type":"widget_page"},{"authors":["Callum Arnold"],"categories":["Demo"],"content":" Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 widgets, themes, and language packs included!\nCheck out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\n Setup Academic Get Started View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \r\r\rKey features:\n Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 15+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Color Themes Academic comes with day (light) and night (dark) mode built-in. Click the sun/moon icon in the top right of the Demo to see it in action!\nChoose a stunning color and font theme for your site. Themes are fully customizable and include:\n\r\r\r\r\r\r\r\r Ecosystem  Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site Academic Scripts: Scripts to help migrate content to new versions of Academic  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Then personalize and deploy your new site.\nUpdating View the Update Guide.\nFeel free to star the project on Github to help keep track of updates.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555459200,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/post/getting-started/","publishdate":"2016-04-20T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website in under 10 minutes.","tags":["Academic"],"title":"Academic: the website builder for Hugo","type":"post"},{"authors":["Callum Arnold","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":null,"categories":["R"],"content":"\rR Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\r## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00\rfit \u0026lt;- lm(dist ~ speed, data = cars)\rfit\r## ## Call:\r## lm(formula = dist ~ speed, data = cars)\r## ## Coefficients:\r## (Intercept) speed ## -17.579 3.932\r\rIncluding Plots\rYou can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1))\rpie(\rc(280, 60, 20),\rc(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;),\rcol = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;),\rinit.angle = -50, border = NA\r)\r\rFigure 1: A fancy pie chart.\r\r\r","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1437703994,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"/post/2015-07-23-r-rmarkdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/post/2015-07-23-r-rmarkdown/","section":"post","summary":"R Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\r## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":["Callum Arnold","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]